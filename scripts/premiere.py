'''scripts/premiere.py'''

"""
This script's purpose is to export an XML file that can be imported by Adobe Premiere.

It doesn't support zooming in yet.
"""

# Included functions
from scripts.usefulFunctions import getAudioChunks
from scripts.wavfile import read, write

# Internal libraries
import os
import sys
import tempfile
import subprocess
from shutil import rmtree
from datetime import timedelta

def exportToPremiere(ffmpeg, myInput, newOutput, silentT, zoomT, frameMargin, sampleRate,
    videoSpeed, silentSpeed):
    print('Running from premiere.py')
    TEMP = tempfile.mkdtemp()

    fps = 29.97

    cmd = [ffmpeg, '-i', myInput, '-ab', '160k', '-ac', '2', '-ar',
        str(sampleRate), '-vn', f'{TEMP}/output.wav', '-nostats', '-loglevel', '0']
    subprocess.call(cmd)

    sampleRate, audioData = read(f'{TEMP}/output.wav')
    chunks = getAudioChunks(audioData, sampleRate, fps, silentT, zoomT, frameMargin)
    rmtree(TEMP)

    clips = []
    newSpeed = [silentSpeed, videoSpeed]
    for chunk in chunks:
        if(newSpeed[chunk[2]] != 99999):
            clips.append([chunk[0], chunk[1], newSpeed[chunk[2]] * 100])

    if(len(clips) < 1):
        print('Error! Less than 1 clip.')
        sys.exit()

    print('\nWarning, this method is underdeveloped and does not support many features.')

    pathurl = 'file://localhost' + os.path.abspath(myInput)

    name = os.path.basename(myInput)

    ntsc = 'FALSE'
    ana = 'FALSE' # anamorphic
    alphatype = 'none'
    depth = '16'
    width = '1280'
    height = '720'
    pixelar = 'square' # pixel aspect ratio
    colordepth = '24'
    sr = sampleRate


    with open('export.xml', 'w', encoding='utf-8') as outfile:
        outfile.write('<!-- Generated by Auto-Editor -->\n')
        outfile.write('<!-- https://github.com/WyattBlue/auto-editor -->\n')
        outfile.write('\n')
        outfile.write('<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE xmeml>\n')
        outfile.write('<xmeml version="4">\n')
        outfile.write('\t<sequence>\n')
        outfile.write('\t\t<name>auto-editor export group</name>\n')
        outfile.write('\t\t<media>\n')
        outfile.write('\t\t\t<video>\n')
        outfile.write('\t\t\t\t<format>\n')
        outfile.write('\t\t\t\t\t<samplecharacteristics>\n')
        outfile.write('\t\t\t\t\t\t<rate>\n')
        outfile.write('\t\t\t\t\t\t\t<timebase>30</timebase>\n')
        outfile.write(f'\t\t\t\t\t\t\t<ntsc>{ntsc}</ntsc>\n')
        outfile.write('\t\t\t\t\t\t</rate>\n')
        outfile.write(f'\t\t\t\t\t\t<width>{width}</width>\n')
        outfile.write(f'\t\t\t\t\t\t<height>{height}</height>\n')
        outfile.write(f'\t\t\t\t\t\t<anamorphic>{ana}</anamorphic>\n')
        outfile.write(f'\t\t\t\t\t\t<pixelaspectratio>{pixelar}</pixelaspectratio>\n')
        outfile.write('\t\t\t\t\t\t<fielddominance>none</fielddominance>\n')
        outfile.write(f'\t\t\t\t\t\t<colordepth>{colordepth}</colordepth>\n')
        outfile.write('\t\t\t\t\t</samplecharacteristics>\n')
        outfile.write('\t\t\t\t</format>\n')
        outfile.write('\t\t\t\t<track>\n')

        # Handle video clips.
        total = 0
        for j, clip in enumerate(clips):
            myStart = int(total)
            total += (clip[1] - clip[0]) / (clip[2] / 100)
            myEnd = int(total)

            outfile.write(f'\t\t\t\t\t<clipitem id="clipitem-{j+7}">\n')
            outfile.write('\t\t\t\t\t\t<masterclipid>masterclip-2</masterclipid>\n')
            outfile.write(f'\t\t\t\t\t\t<name>{name}</name>\n')
            outfile.write(f'\t\t\t\t\t\t<start>{myStart}</start>\n')
            outfile.write(f'\t\t\t\t\t\t<end>{myEnd}</end>\n')
            outfile.write(f'\t\t\t\t\t\t<in>{int(clip[0] / (clip[2] / 100))}</in>\n')
            outfile.write(f'\t\t\t\t\t\t<out>{int(clip[1] / (clip[2] / 100))}</out>\n')

            if(j == 0):
                outfile.write('\t\t\t\t\t\t<file id="file-2">\n')
                outfile.write(f'\t\t\t\t\t\t\t<name>{name}</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t<pathurl>{pathurl}</pathurl>\n')
                outfile.write('\t\t\t\t\t\t\t<rate>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<timebase>{fps}</timebase>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<ntsc>{ntsc}</ntsc>\n')
                outfile.write('\t\t\t\t\t\t\t</rate>\n')
                outfile.write('\t\t\t\t\t\t\t<media>\n')
                outfile.write('\t\t\t\t\t\t\t\t<video>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t<samplecharacteristics>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t\t<rate>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t\t<timebase>{fps}</timebase>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t\t<ntsc>{ntsc}</ntsc>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t\t</rate>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t<width>{width}</width>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t<height>{height}</height>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t<anamorphic>{ana}</anamorphic>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t<pixelaspectratio>{pixelar}</pixelaspectratio>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t\t<fielddominance>none</fielddominance>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t</samplecharacteristics>\n')
                outfile.write('\t\t\t\t\t\t\t\t</video>\n')
                outfile.write('\t\t\t\t\t\t\t\t<audio>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t<samplecharacteristics>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t<depth>{depth}</depth>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t\t<samplerate>{sr}</samplerate>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t</samplecharacteristics>\n')
                outfile.write('\t\t\t\t\t\t\t\t\t<channelcount>2</channelcount>\n')
                outfile.write('\t\t\t\t\t\t\t\t</audio>\n')
                outfile.write('\t\t\t\t\t\t\t</media>\n')
                outfile.write('\t\t\t\t\t\t</file>\n')
            else:
                outfile.write(f'\t\t\t\t\t\t<file id="file-2"/>\n')

            # Add the speed effect if nessecary
            if(clip[2] != 100):
                outfile.write(f'\t\t\t\t\t\t<filter>\n')
                outfile.write(f'\t\t\t\t\t\t\t<effect>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<name>Time Remap</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<effectid>timeremap</effectid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<effectcategory>motion</effectcategory>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<effecttype>motion</effecttype>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<mediatype>video</mediatype>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>variablespeed</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>variablespeed</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemin>0</valuemin>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemax>1</valuemax>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>0</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>speed</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>speed</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemin>-100000</valuemin>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemax>100000</valuemax>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>{clip[2]}</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>reverse</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>reverse</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>FALSE</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>frameblending</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>frameblending</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>FALSE</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t</effect>\n')
                outfile.write(f'\t\t\t\t\t\t</filter>\n')

            # Linking for video blocks
            for i in range(3):
                outfile.write('\t\t\t\t\t\t<link>\n')
                outfile.write(f'\t\t\t\t\t\t\t<linkclipref>clipitem-{(i*(len(clips)+1))+7+j}</linkclipref>\n')
                if(i == 0):
                    outfile.write('\t\t\t\t\t\t\t<mediatype>video</mediatype>\n')
                else:
                    outfile.write('\t\t\t\t\t\t\t<mediatype>audio</mediatype>\n')
                if(i == 2):
                    outfile.write(f'\t\t\t\t\t\t\t<trackindex>2</trackindex>\n')
                else:
                    outfile.write('\t\t\t\t\t\t\t<trackindex>1</trackindex>\n')
                outfile.write(f'\t\t\t\t\t\t\t<clipindex>{j+1}</clipindex>\n')
                if(i == 1 or i == 2):
                    outfile.write('\t\t\t\t\t\t\t<groupindex>1</groupindex>\n')
                outfile.write('\t\t\t\t\t\t</link>\n')
            outfile.write('\t\t\t\t\t</clipitem>\n')
        outfile.write('\t\t\t\t</track>\n')
        outfile.write('\t\t\t</video>\n')
        outfile.write('\t\t\t<audio>\n')
        outfile.write('\t\t\t\t<numOutputChannels>2</numOutputChannels>\n')
        outfile.write('\t\t\t\t<format>\n')
        outfile.write('\t\t\t\t\t<samplecharacteristics>\n')
        outfile.write(f'\t\t\t\t\t\t<depth>{depth}</depth>\n')
        outfile.write(f'\t\t\t\t\t\t<samplerate>{sr}</samplerate>\n')
        outfile.write('\t\t\t\t\t</samplecharacteristics>\n')
        outfile.write('\t\t\t\t</format>\n')
        outfile.write('\t\t\t\t<track PannerIsInverted="true" PannerStartKeyframe="-91445760000000000,0.5,0,0,0,0,0,0" PannerName="Balance" currentExplodedTrackIndex="0" totalExplodedTrackCount="2" premiereTrackType="Stereo">\n')


        total = 0
        # Audio Clips
        for j, clip in enumerate(clips):
            outfile.write(f'\t\t\t\t\t<clipitem id="clipitem-{len(clips)+8+j}" premiereChannelType="stereo">\n')
            outfile.write(f'\t\t\t\t\t\t<masterclipid>masterclip-2</masterclipid>\n')
            outfile.write(f'\t\t\t\t\t\t<name>{name}</name>\n')

            myStart = int(total)
            total += (clip[1] - clip[0]) / (clip[2] / 100)
            myEnd = int(total)

            outfile.write(f'\t\t\t\t\t\t<start>{myStart}</start>\n')
            outfile.write(f'\t\t\t\t\t\t<end>{myEnd}</end>\n')

            outfile.write(f'\t\t\t\t\t\t<in>{int(clip[0] / (clip[2] / 100))}</in>\n')
            outfile.write(f'\t\t\t\t\t\t<out>{int(clip[1] / (clip[2] / 100))}</out>\n')
            outfile.write('\t\t\t\t\t\t<file id="file-2"/>\n')
            outfile.write('\t\t\t\t\t\t<sourcetrack>\n')
            outfile.write('\t\t\t\t\t\t\t<mediatype>audio</mediatype>\n')
            outfile.write('\t\t\t\t\t\t\t<trackindex>1</trackindex>\n')
            outfile.write('\t\t\t\t\t\t</sourcetrack>\n')

            # Add speed effect for audio blocks
            if(clip[2] != 100):
                outfile.write(f'\t\t\t\t\t\t<filter>\n')
                outfile.write(f'\t\t\t\t\t\t\t<effect>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<name>Time Remap</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<effectid>timeremap</effectid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<effectcategory>motion</effectcategory>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<effecttype>motion</effecttype>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<mediatype>video</mediatype>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>variablespeed</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>variablespeed</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemin>0</valuemin>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemax>1</valuemax>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>0</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>speed</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>speed</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemin>-100000</valuemin>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<valuemax>100000</valuemax>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>{clip[2]}</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>reverse</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>reverse</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>FALSE</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t<parameter authoringApp="PremierePro">\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<parameterid>frameblending</parameterid>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<name>frameblending</name>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t\t<value>FALSE</value>\n')
                outfile.write(f'\t\t\t\t\t\t\t\t</parameter>\n')
                outfile.write(f'\t\t\t\t\t\t\t</effect>\n')
                outfile.write(f'\t\t\t\t\t\t</filter>\n')

            for i in range(3):
                outfile.write('\t\t\t\t\t\t<link>\n')
                outfile.write(f'\t\t\t\t\t\t\t<linkclipref>clipitem-{(i*(len(clips)+1))+7+j}</linkclipref>\n')
                if(i == 0):
                    outfile.write('\t\t\t\t\t\t\t<mediatype>video</mediatype>\n')
                else:
                    outfile.write('\t\t\t\t\t\t\t<mediatype>audio</mediatype>\n')

                if(i == 2):
                    outfile.write('\t\t\t\t\t\t\t<trackindex>2</trackindex>\n')
                else:
                    outfile.write('\t\t\t\t\t\t\t<trackindex>1</trackindex>\n')

                outfile.write(f'\t\t\t\t\t\t\t<clipindex>{j+1}</clipindex>\n')

                if(i == 1 or i == 2):
                    outfile.write('\t\t\t\t\t\t\t<groupindex>1</groupindex>\n')
                outfile.write('\t\t\t\t\t\t</link>\n')
            outfile.write('\t\t\t\t\t</clipitem>\n')
        outfile.write('\t\t\t\t\t<outputchannelindex>1</outputchannelindex>\n')
        outfile.write('\t\t\t\t</track>\n')
        outfile.write('\t\t\t</audio>\n')
        outfile.write('\t\t</media>\n')
        outfile.write('\t</sequence>\n')
        outfile.write('</xmeml>')


    return 'export.xml'
