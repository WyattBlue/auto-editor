name: build
on:
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: write
  id-token: write
jobs:
  main:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            binary_name: auto-editor-linux-x86_64
          - os: macos-13
            arch: x86_64
            binary_name: auto-editor-macos-x86_64
          - os: macos-latest
            arch: arm64
            binary_name: auto-editor-macos-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Nim
        if: runner.os != 'macOS'
        uses: jiro4989/setup-nim-action@v2
        with:
          nim-version: "stable"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install packages for macOS
        if: runner.os == 'macOS'
        run: |
          brew update && brew install nim
          brew unlink gettext libidn2 libpng libtiff libunistring libx11 libxau libxcb libxdmcp little-cms2 unbound
      - name: Setup
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential pkg-config nasm git
          elif [ "${{ matrix.os }}" = "macos-13" ]; then
            brew install nasm
            echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
          fi
      - name: Build FFmpeg
        run: nimble makeff
      - name: Compile
        run: nimble make
      - name: Test
        run: nimble test
      - name: Rename binary
        run: |
          mv auto-editor ${{ matrix.binary_name }}
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.binary_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python for wheel building
        if: github.event_name == 'release'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install wheel building dependencies
        if: github.event_name == 'release'
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      - name: Copy binary for wheel building
        if: github.event_name == 'release'
        run: |
          cp ${{ matrix.binary_name }} auto-editor
      - name: Build wheel
        if: github.event_name == 'release'
        run: |
          python -m build --wheel
          # Rename wheel to include platform tag
          wheel_file=$(ls dist/*.whl)
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            platform_tag="linux_x86_64"
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
            platform_tag="macosx_13_0_x86_64"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            platform_tag="macosx_14_0_arm64"
          fi
          new_wheel_name=$(echo $wheel_file | sed "s/py3-none-any.whl/py3-none-${platform_tag}.whl/")
          mv "$wheel_file" "$new_wheel_name"
          echo "WHEEL_FILE=$new_wheel_name" >> $GITHUB_ENV
      - name: Upload wheel as artifact
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.arch }}-${{ matrix.os }}
          path: ${{ env.WHEEL_FILE }}

  windows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Nim
        uses: jiro4989/setup-nim-action@v2
        with:
          nim-version: "stable"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install mingw-w64
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 mingw-w64-tools mingw-w64-x86-64-dev
          sudo apt-get install -y build-essential pkg-config nasm git
      - name: Build FFmpeg
        run: nimble makeffwin
      - name: Compile
        run: nimble windows
      - name: Rename binary
        run: |
          mv auto-editor.exe auto-editor-windows-amd64.exe
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: auto-editor-windows-amd64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python for wheel building
        if: github.event_name == 'release'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install wheel building dependencies
        if: github.event_name == 'release'
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      - name: Copy binary for wheel building
        if: github.event_name == 'release'
        run: |
          cp auto-editor-windows-amd64.exe auto-editor.exe
      - name: Build wheel
        if: github.event_name == 'release'
        run: |
          python -m build --wheel
          # Rename wheel to include platform tag
          wheel_file=$(ls dist/*.whl)
          new_wheel_name=$(echo $wheel_file | sed "s/py3-none-any.whl/py3-none-win_amd64.whl/")
          mv "$wheel_file" "$new_wheel_name"
          echo "WHEEL_FILE=$new_wheel_name" >> $GITHUB_ENV
      - name: Upload wheel as artifact
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-amd64
          path: ${{ env.WHEEL_FILE }}

  publish-to-pypi:
    if: github.event_name == 'release'
    needs: [main, windows]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          merge-multiple: true
          path: dist/
      - name: List downloaded wheels
        run: ls -la dist/
      - name: Publish wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

